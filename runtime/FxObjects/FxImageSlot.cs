using System;
using System.Collections.Generic;
using System.Net.NetworkInformation;
using UnityEngine;
using UnityEngine.Rendering;

namespace Packages.FxEditor
{
    public class FxImageSlot : MonoBehaviour
    {
        private static byte[] bits =
        {
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
            0,
            0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0,
            1,
            1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0,
            0,
            0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
            0,
            0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,
            0,
            0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,
            1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,
            0,
            0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1,
            1,
            1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0,
            1,
            1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
            0,
            1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1,
            0,
            0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0,
            0,
            0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
            0,
            0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1,
            0,
            0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
            1,
            1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
            0,
            1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0,
            0,
            1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1,
            0,
            0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,
            0,
            0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1,
            1,
            1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
            0,
            1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
            1,
            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1,
            0,
            0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0,
            0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
            0,
            1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0,
            0,
            0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1,
            1, 1, 1, 1, 1, 1, 1
        };

        private float[] colorTalbe =
        {
            255, 201, 0, 0, 184, 255, 0, 255, 109, 108, 255, 0, 255, 0, 249, 0, 255, 133, 0, 255, 94, 255, 0, 8, 0, 240,
            255, 0, 255, 127, 255, 0, 114, 255, 0, 109, 255, 195, 0, 21, 255, 0, 0, 240, 255, 0, 26, 255, 185, 0, 255,
            133, 255, 0, 24, 0, 255, 89, 255, 0, 0, 255, 178, 255, 0, 30, 0, 221, 255, 223, 0, 255, 0, 146, 255, 72,
            255, 0, 159, 0, 255, 193, 255, 0, 246, 255, 0, 0, 255, 175, 0, 117, 255, 147, 0, 255, 134, 0, 255, 0, 106,
            255, 59, 255, 0, 255, 0, 0, 255, 235, 0, 255, 173, 0, 255, 0, 216, 255, 0, 106, 171, 0, 255, 0, 88, 255,
            255, 235, 0, 146, 0, 255, 0, 236, 255, 129, 0, 255, 255, 0, 9, 0, 255, 119, 0, 255, 44, 0, 211, 255, 221,
            255, 0, 0, 255, 64, 255, 0, 164, 0, 116, 255, 241, 255, 0, 79, 0, 255, 0, 255, 114, 0, 255, 228, 255, 0, 10,
            58, 0, 255, 0, 255, 100, 0, 219, 255, 142, 255, 0, 255, 0, 215, 216, 255, 0, 0, 237, 255, 57, 255, 0, 255,
            35, 0, 0, 214, 255, 255, 0, 83, 31, 0, 255, 0, 255, 43, 255, 74, 0, 0, 145, 255, 102, 255, 0, 255, 83, 0, 0,
            255, 85, 255, 97, 0, 255, 0, 118, 255, 0, 251, 255, 0, 218, 38, 0, 255, 0, 200, 255, 132, 255, 0, 255, 156,
            0, 255, 0, 28, 0, 179, 255, 110, 255, 0, 19, 255, 0, 0, 116, 255, 255, 35, 0, 0, 255, 162, 134, 255, 0, 104,
            0, 255, 160, 0, 255, 210, 0, 255, 104, 255, 0, 255, 4, 0, 255, 0, 216, 1, 0, 255, 255, 0, 218, 0, 57, 255,
            88, 0, 255, 42, 255, 0, 0, 107, 255, 90, 0, 255, 255, 56, 0, 109, 255, 0, 111, 0, 255, 28, 0, 255, 255, 4,
            0, 255, 102, 0, 0, 255, 56, 255, 0, 17, 179, 0, 255, 0, 150, 255, 255, 0, 115, 255, 0, 97, 54, 255, 0, 255,
            0, 106, 255, 0, 104, 255, 136, 0, 87, 255, 0, 56, 0, 255, 255, 0, 170, 255, 86, 0, 0, 116, 255, 255, 104, 0,
            224, 255, 0, 255, 0, 209, 208, 255, 0, 255, 0, 120, 0, 173, 255, 252, 0, 255, 0, 255, 102, 0, 255, 79, 170,
            0, 255, 0, 255, 52, 0, 255, 170, 0, 255, 159, 255, 0, 39, 0, 255, 22, 9, 0, 255, 0, 255, 208, 71, 255, 0,
            255, 0, 22, 216, 255, 0, 255, 146, 0, 218, 255, 0, 255, 78, 0, 255, 0, 171, 255, 0, 199, 255, 0, 144, 0,
            255, 193, 68, 255, 0, 255, 0, 31, 219, 255, 0, 174, 255, 0, 255, 0, 65, 0, 255, 45, 255, 0, 253, 0, 255, 74,
            255, 37, 0, 255, 199, 0, 49, 255, 0, 0, 234, 255, 0, 50, 255, 255, 0, 38, 0, 158, 255, 255, 203, 0, 0, 13,
            255, 73, 0, 255, 255, 182, 0, 30, 255, 0, 0, 255, 255, 0, 196, 255, 255, 129, 0, 255, 0, 221, 0, 112, 255,
            65, 0, 255, 0, 255, 214, 255, 0, 85, 255, 19, 0, 255, 0, 56, 200, 0, 255, 0, 94, 255, 255, 182, 0, 255, 0,
            214, 255, 0, 46, 1, 255, 0, 255, 55, 0, 255, 130, 0, 0, 235, 255, 0, 255, 196, 215, 0, 255, 255, 93, 0, 157,
            255, 0, 190, 255, 0, 178, 255, 0, 244, 255, 0, 0, 249, 255, 148, 255, 0, 51, 255, 0, 223, 0, 255, 255, 254,
            0, 147, 255, 0, 0, 255, 111, 244, 0, 255, 231, 0, 255, 255, 10, 0, 0, 255, 124, 255, 0, 196, 0, 103, 255, 0,
            255, 231, 0, 255, 187, 217, 255, 0, 255, 0, 153, 178, 255, 0, 0, 255, 73, 255, 0, 0, 113, 255, 0, 0, 147,
            255, 196, 0, 255, 255, 0, 247, 255, 2, 0, 0, 255, 168, 0, 234, 255, 166, 255, 0, 255, 80, 0, 255, 65, 0, 0,
            255, 186, 0, 255, 228, 172, 255, 0, 195, 255, 0, 0, 54, 255, 46, 255, 0, 75, 255, 0, 0, 185, 255, 255, 165,
            0, 163, 0, 255, 0, 255, 216, 150, 255, 0, 255, 55, 0, 255, 7, 0, 255, 106, 0, 173, 255, 0, 39, 0, 255, 255,
            37, 0, 255, 32, 0, 0, 58, 255, 0, 255, 1, 255, 238, 0, 0, 197, 255, 255, 0, 105, 0, 199, 255, 255, 128, 0
        };

        private int colorTableCount = 256;

        //-------------------------------------
        public int slotID = 0;
        public int width = 32;
        public int height = 32;
        public int channelName = 0;
        public List<string> names = new List<string>();


        private int lastID = 0;
        private Texture2D texture = null;

        private void UpdateNames(Shader shader)
        {
            names.Clear();
            int c = shader.GetPropertyCount();
            for (int i = 0; i < c; i++)
            {
                var type = shader.GetPropertyType(i);
                if (type == ShaderPropertyType.Texture)
                {
                    var name = shader.GetPropertyName(i);
                    names.Add(name);
                }
            }
        }


        void UpdateTextureID()
        {
            if (lastID == slotID) return;

            //if (texture != null) return;
            int colorSize = 8;
            int outSize = 64;
            int factor = 8;

            //-----------
            int nY = 1;
            int nSize = 16;
            int nFactor = nSize;

            //-----
            
            Color[] colors = new Color[colorSize * colorSize];
            for (int i = 0; i < colorSize * colorSize; i++)
            {
                int p = (i+slotID) % colorTableCount;
                p *= 3;
                colors[i] =new Color(colorTalbe[p]/255.0f,
                    colorTalbe[p+1]/255.0f,
                    colorTalbe[p+2]/255.0f,
                    1);
            }
                


            //fill colors
            texture = new Texture2D(outSize, outSize, TextureFormat.RGB24, false);
            for (var x = 0; x < outSize; x++)
            {
                int cx = x / factor;
                for (var y = 0; y < outSize; y++)
                {
                    int cy = y / factor;
                    int ci = cy * colorSize + cx;
                    texture.SetPixel(x, y, colors[ci]);
                }
            }

            //fill number

            int startPos = (nY * nFactor);
            int endPos = (nY + 1) * nFactor;
            int[] idIndexs =
            {
                (256) * ((slotID / 1000) % 10) - 1,
                (256) * ((slotID / 100) % 10) - 1,
                (256) * ((slotID / 10) % 10) - 1,
                (256) * ((slotID) % 10) - 1
            };

            for (var y = startPos; y < endPos; y++)
            {
                int cy = y / nFactor;
                int numbY = nSize - (y % nSize);

                for (var x = 0; x < outSize; x++)
                {
                    int cx = x / nFactor;
                    int ci = cy * colorSize + cx;

                    int numX = x % nSize;
                    int idIndex = x / nSize;


                    int index = numbY + numX * nSize;
                    index += idIndexs[idIndex];
                    if (bits[index] > 0)
                    {
                        texture.SetPixel(x, y + 8, Color.white);
                    }
                    else
                    {
                        texture.SetPixel(x, y + 8, Color.black);
                    }
                }
            }

            texture.Apply();
            texture.filterMode = FilterMode.Point;
            
            lastID = slotID;
        }

        private void OnDrawGizmos()
        {
            if (Application.isPlaying) return;
            UpdateTextureID();

            var mat = GetComponent<Renderer>().material;
            // if (mat == null)mat = GetComponent<Renderer>().material;
            
            UpdateNames(mat.shader);
            mat.SetTexture(names[channelName], texture);
            
        }


        private void Start()
        {
            lastID = -1;
        }

        private void Update()
        {
            
            UpdateTextureID();

            var mat = GetComponent<Renderer>().material;
            // if (mat == null)mat = GetComponent<Renderer>().material;
            
            UpdateNames(mat.shader);
            mat.SetTexture(names[channelName], texture);
        }
    }
}